# coding: utf-8

"""
    X-Road Security Server Admin API

    X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.  # noqa: E501

    OpenAPI spec version: 1.0.30
    Contact: info@niis.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sstoolkit.api_client.api_client import ApiClient


class ClientsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_client(self, **kwargs):  # noqa: E501
        """Add new client for the security server.  # noqa: E501

        <h3>Adds new client to the system.</h3> <p>The client id will be validated and if the validation fails a validation error is returned. Note that with this endpoint it is possible to add an unregistered member as a client. <ul> <li>Attempt to add an unregistered member with <code>ClientAdd.ignore_warnings</code> = false causes the operation to fail with a warning in response's ErrorInfo object.</li> <li>Attempt to add an unregistered member with <code>ClientAdd.ignore_warnings</code> = true succeeds.</li> </ul> </p> <p>When trying to add an unregister client, the error response has an error code <code>unregistered_member</code> and the metadata field contains the identifier of the unregistered client</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_client(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClientAdd body: client to add
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_client_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_client_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_client_with_http_info(self, **kwargs):  # noqa: E501
        """Add new client for the security server.  # noqa: E501

        <h3>Adds new client to the system.</h3> <p>The client id will be validated and if the validation fails a validation error is returned. Note that with this endpoint it is possible to add an unregistered member as a client. <ul> <li>Attempt to add an unregistered member with <code>ClientAdd.ignore_warnings</code> = false causes the operation to fail with a warning in response's ErrorInfo object.</li> <li>Attempt to add an unregistered member with <code>ClientAdd.ignore_warnings</code> = true succeeds.</li> </ul> </p> <p>When trying to add an unregister client, the error response has an error code <code>unregistered_member</code> and the metadata field contains the identifier of the unregistered client</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_client_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClientAdd body: client to add
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_client" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Client',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_client_local_group(self, id, **kwargs):  # noqa: E501
        """add new local group for the security server client  # noqa: E501

        <h3>Administrator adds a new local group for the client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_client_local_group(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :param LocalGroupAdd body: group to add
        :return: LocalGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_client_local_group_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_client_local_group_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def add_client_local_group_with_http_info(self, id, **kwargs):  # noqa: E501
        """add new local group for the security server client  # noqa: E501

        <h3>Administrator adds a new local group for the client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_client_local_group_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :param LocalGroupAdd body: group to add
        :return: LocalGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_client_local_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_client_local_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id}/local-groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LocalGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_client_service_description(self, id, **kwargs):  # noqa: E501
        """add new service description for the security server client  # noqa: E501

        <h3>Administrator adds a new service description for the client.</h3> <p> This endpoint can also return metadata in the error response if adding the service description fails due to invalid URLs, already existing service description or already existing services. If adding the service description fails due to an invalid service URL, the error response will have the error code <code>invalid_service_url</code> and the metadata will contain a list of invalid URLs. If adding the service description fails due to an already existing service description, the error response will have the error code <code>url_already_exists</code> and the metadata will contain the existing URL. If adding the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the '409' response in this endpoint. </p> <p> This endpoint can return a warnings response which can be ignored by setting <code>ServiceDescriptionAdd.ignore_warnings</code> = true. If <code>ServiceDescriptionAdd.ignore_warnings</code> = false, a warnings response will be returned if WSDL or OpenAPI3 validation fails and validation warnings are returned. The warnings will have the warning code <code>wsdl_validation_warnings</code> or <code>openapi_validation_warnings</code> depending on which type the service description is. The metadata of the warning contains the output of the validator itself. </p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_client_service_description(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :param ServiceDescriptionAdd body:
        :return: ServiceDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_client_service_description_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_client_service_description_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def add_client_service_description_with_http_info(self, id, **kwargs):  # noqa: E501
        """add new service description for the security server client  # noqa: E501

        <h3>Administrator adds a new service description for the client.</h3> <p> This endpoint can also return metadata in the error response if adding the service description fails due to invalid URLs, already existing service description or already existing services. If adding the service description fails due to an invalid service URL, the error response will have the error code <code>invalid_service_url</code> and the metadata will contain a list of invalid URLs. If adding the service description fails due to an already existing service description, the error response will have the error code <code>url_already_exists</code> and the metadata will contain the existing URL. If adding the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the '409' response in this endpoint. </p> <p> This endpoint can return a warnings response which can be ignored by setting <code>ServiceDescriptionAdd.ignore_warnings</code> = true. If <code>ServiceDescriptionAdd.ignore_warnings</code> = false, a warnings response will be returned if WSDL or OpenAPI3 validation fails and validation warnings are returned. The warnings will have the warning code <code>wsdl_validation_warnings</code> or <code>openapi_validation_warnings</code> depending on which type the service description is. The metadata of the warning contains the output of the validator itself. </p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_client_service_description_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :param ServiceDescriptionAdd body:
        :return: ServiceDescription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_client_service_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_client_service_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id}/service-descriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceDescription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_client_tls_certificate(self, id, **kwargs):  # noqa: E501
        """add new certificate for the security server client  # noqa: E501

        <h3>Administrator adds a new certificate for the client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_client_tls_certificate(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :param Object body: certificate to add
        :return: CertificateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_client_tls_certificate_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_client_tls_certificate_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def add_client_tls_certificate_with_http_info(self, id, **kwargs):  # noqa: E501
        """add new certificate for the security server client  # noqa: E501

        <h3>Administrator adds a new certificate for the client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_client_tls_certificate_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :param Object body: certificate to add
        :return: CertificateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_client_tls_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_client_tls_certificate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id}/tls-certificates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificateDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_service_client_access_rights(self, id, sc_id, **kwargs):  # noqa: E501
        """Add new access rights for selected service client. If service client did not exist yet, one is created.  # noqa: E501

        <h3>Adds access rights to the service client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_client_access_rights(id, sc_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client who owns the services (required)
        :param str sc_id: id of the service client (required)
        :param AccessRights body:
        :return: list[AccessRight]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_service_client_access_rights_with_http_info(id, sc_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_service_client_access_rights_with_http_info(id, sc_id, **kwargs)  # noqa: E501
            return data

    def add_service_client_access_rights_with_http_info(self, id, sc_id, **kwargs):  # noqa: E501
        """Add new access rights for selected service client. If service client did not exist yet, one is created.  # noqa: E501

        <h3>Adds access rights to the service client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_service_client_access_rights_with_http_info(id, sc_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client who owns the services (required)
        :param str sc_id: id of the service client (required)
        :param AccessRights body:
        :return: list[AccessRight]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sc_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_service_client_access_rights" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_service_client_access_rights`")  # noqa: E501
        # verify the required parameter 'sc_id' is set
        if ('sc_id' not in params or
                params['sc_id'] is None):
            raise ValueError("Missing the required parameter `sc_id` when calling `add_service_client_access_rights`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'sc_id' in params:
            path_params['sc_id'] = params['sc_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id}/service-clients/{sc_id}/access-rights', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AccessRight]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_owner(self, id, **kwargs):  # noqa: E501
        """make client Security Server's owner. Client must be a member and already registered on the Security Server  # noqa: E501

        <h3>Administrator changes Security Server's owner.</h3> <p>This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_owner(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client to be set as owner (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_owner_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.change_owner_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def change_owner_with_http_info(self, id, **kwargs):  # noqa: E501
        """make client Security Server's owner. Client must be a member and already registered on the Security Server  # noqa: E501

        <h3>Administrator changes Security Server's owner.</h3> <p>This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_owner_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client to be set as owner (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_owner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `change_owner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id}/make-owner', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_client(self, id, **kwargs):  # noqa: E501
        """delete security server client  # noqa: E501

        <h3>Administrator deletes the client of the security server.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_client_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_client_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_client_with_http_info(self, id, **kwargs):  # noqa: E501
        """delete security server client  # noqa: E501

        <h3>Administrator deletes the client of the security server.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_client_tls_certificate(self, id, hash, **kwargs):  # noqa: E501
        """delete certificate  # noqa: E501

        <h3>Administrator deletes the certificate from selected client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_tls_certificate(id, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :param str hash: SHA-1 hash of the certificate (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_client_tls_certificate_with_http_info(id, hash, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_client_tls_certificate_with_http_info(id, hash, **kwargs)  # noqa: E501
            return data

    def delete_client_tls_certificate_with_http_info(self, id, hash, **kwargs):  # noqa: E501
        """delete certificate  # noqa: E501

        <h3>Administrator deletes the certificate from selected client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_tls_certificate_with_http_info(id, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :param str hash: SHA-1 hash of the certificate (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'hash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_client_tls_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_client_tls_certificate`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `delete_client_tls_certificate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id}/tls-certificates/{hash}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_orphans(self, id, **kwargs):  # noqa: E501
        """delete orphaned sign keys, certificates and csrs left behind a delete client  # noqa: E501

        <h3>Administrator deletes the orphaned sign keys, certificates and csrs left behind a delete client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_orphans(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_orphans_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_orphans_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_orphans_with_http_info(self, id, **kwargs):  # noqa: E501
        """delete orphaned sign keys, certificates and csrs left behind a delete client  # noqa: E501

        <h3>Administrator deletes the orphaned sign keys, certificates and csrs left behind a delete client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_orphans_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_orphans" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_orphans`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id}/orphans', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_service_client_access_rights(self, id, sc_id, **kwargs):  # noqa: E501
        """remove access rights  # noqa: E501

        <h3>Administrator removes access rights from selected service client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_client_access_rights(id, sc_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client who owns the services (required)
        :param str sc_id: id of the service client (required)
        :param AccessRights body: list of access rights to be deleted
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_service_client_access_rights_with_http_info(id, sc_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_service_client_access_rights_with_http_info(id, sc_id, **kwargs)  # noqa: E501
            return data

    def delete_service_client_access_rights_with_http_info(self, id, sc_id, **kwargs):  # noqa: E501
        """remove access rights  # noqa: E501

        <h3>Administrator removes access rights from selected service client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_service_client_access_rights_with_http_info(id, sc_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client who owns the services (required)
        :param str sc_id: id of the service client (required)
        :param AccessRights body: list of access rights to be deleted
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sc_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_service_client_access_rights" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_service_client_access_rights`")  # noqa: E501
        # verify the required parameter 'sc_id' is set
        if ('sc_id' not in params or
                params['sc_id'] is None):
            raise ValueError("Missing the required parameter `sc_id` when calling `delete_service_client_access_rights`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'sc_id' in params:
            path_params['sc_id'] = params['sc_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id}/service-clients/{sc_id}/access-rights/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_clients(self, **kwargs):  # noqa: E501
        """find security server clients  # noqa: E501

        <h3>Administrator views the clients of the security server.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_clients(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: pass an optional search string (name) for looking up clients
        :param str instance: pass an optional search string (instance) for looking up clients
        :param str member_class: pass an optional search string (member_class) for looking up clients
        :param str member_code: pass an optional search string (member_code) for looking up clients
        :param str subsystem_code: pass an optional search string (subsystem_code) for looking up clients
        :param bool show_members: to include members for search results
        :param bool internal_search: to search only clients inside security server
        :param bool local_valid_sign_cert: to search only local clients with valid sign cert
        :param bool exclude_local: to search only clients that are not added to this security server
        :return: list[Client]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_clients_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_clients_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_clients_with_http_info(self, **kwargs):  # noqa: E501
        """find security server clients  # noqa: E501

        <h3>Administrator views the clients of the security server.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_clients_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: pass an optional search string (name) for looking up clients
        :param str instance: pass an optional search string (instance) for looking up clients
        :param str member_class: pass an optional search string (member_class) for looking up clients
        :param str member_code: pass an optional search string (member_code) for looking up clients
        :param str subsystem_code: pass an optional search string (subsystem_code) for looking up clients
        :param bool show_members: to include members for search results
        :param bool internal_search: to search only clients inside security server
        :param bool local_valid_sign_cert: to search only local clients with valid sign cert
        :param bool exclude_local: to search only clients that are not added to this security server
        :return: list[Client]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'instance', 'member_class', 'member_code', 'subsystem_code', 'show_members', 'internal_search', 'local_valid_sign_cert', 'exclude_local']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_clients" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501
        if 'member_class' in params:
            query_params.append(('member_class', params['member_class']))  # noqa: E501
        if 'member_code' in params:
            query_params.append(('member_code', params['member_code']))  # noqa: E501
        if 'subsystem_code' in params:
            query_params.append(('subsystem_code', params['subsystem_code']))  # noqa: E501
        if 'show_members' in params:
            query_params.append(('show_members', params['show_members']))  # noqa: E501
        if 'internal_search' in params:
            query_params.append(('internal_search', params['internal_search']))  # noqa: E501
        if 'local_valid_sign_cert' in params:
            query_params.append(('local_valid_sign_cert', params['local_valid_sign_cert']))  # noqa: E501
        if 'exclude_local' in params:
            query_params.append(('exclude_local', params['exclude_local']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Client]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_service_client_candidates(self, id, **kwargs):  # noqa: E501
        """find ServiceClient candidates for a specific client  # noqa: E501

        <h3>Administrator views the clients, globalgroups and localgroups, that could be added as ServiceClients for given Client's services.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_service_client_candidates(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :param str member_name_group_description: pass an optional search string (name) for looking up subjects - name of a member or description of a group
        :param ServiceClientType service_client_type: pass an optional search string (service_client_type) for looking up service clients
        :param str instance: pass an optional search string (instance) for looking up service clients - full instance id should be used
        :param str member_class: pass an optional search string (member_class) for looking up service clients
        :param str member_group_code: pass an optional search string (member_group_code) for looking up service clients - member_code of a member or group_code of a group
        :param str subsystem_code: pass an optional search string (subsystem_code) for looking up service clients
        :return: list[ServiceClient]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_service_client_candidates_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_service_client_candidates_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def find_service_client_candidates_with_http_info(self, id, **kwargs):  # noqa: E501
        """find ServiceClient candidates for a specific client  # noqa: E501

        <h3>Administrator views the clients, globalgroups and localgroups, that could be added as ServiceClients for given Client's services.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_service_client_candidates_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :param str member_name_group_description: pass an optional search string (name) for looking up subjects - name of a member or description of a group
        :param ServiceClientType service_client_type: pass an optional search string (service_client_type) for looking up service clients
        :param str instance: pass an optional search string (instance) for looking up service clients - full instance id should be used
        :param str member_class: pass an optional search string (member_class) for looking up service clients
        :param str member_group_code: pass an optional search string (member_group_code) for looking up service clients - member_code of a member or group_code of a group
        :param str subsystem_code: pass an optional search string (subsystem_code) for looking up service clients
        :return: list[ServiceClient]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'member_name_group_description', 'service_client_type', 'instance', 'member_class', 'member_group_code', 'subsystem_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_service_client_candidates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `find_service_client_candidates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'member_name_group_description' in params:
            query_params.append(('member_name_group_description', params['member_name_group_description']))  # noqa: E501
        if 'service_client_type' in params:
            query_params.append(('service_client_type', params['service_client_type']))  # noqa: E501
        if 'instance' in params:
            query_params.append(('instance', params['instance']))  # noqa: E501
        if 'member_class' in params:
            query_params.append(('member_class', params['member_class']))  # noqa: E501
        if 'member_group_code' in params:
            query_params.append(('member_group_code', params['member_group_code']))  # noqa: E501
        if 'subsystem_code' in params:
            query_params.append(('subsystem_code', params['subsystem_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id}/service-client-candidates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ServiceClient]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client(self, id, **kwargs):  # noqa: E501
        """get security server client information  # noqa: E501

        <h3>Administrator views the client details of the security server.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_client_with_http_info(self, id, **kwargs):  # noqa: E501
        """get security server client information  # noqa: E501

        <h3>Administrator views the client details of the security server.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Client',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_local_groups(self, id, **kwargs):  # noqa: E501
        """get local groups for the selected client  # noqa: E501

        <h3>Administrator views the local groups for the client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_local_groups(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :return: list[LocalGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_local_groups_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_local_groups_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_client_local_groups_with_http_info(self, id, **kwargs):  # noqa: E501
        """get local groups for the selected client  # noqa: E501

        <h3>Administrator views the local groups for the client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_local_groups_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :return: list[LocalGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_local_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_client_local_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id}/local-groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LocalGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_orphans(self, id, **kwargs):  # noqa: E501
        """get information about orphaned sign keys, certificates and csrs left behind a delete client  # noqa: E501

        <h3>Administrator has deleted a client and wants to know if some orphaned sign keys, certificates or csrs exist.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_orphans(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :return: OrphanInformation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_orphans_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_orphans_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_client_orphans_with_http_info(self, id, **kwargs):  # noqa: E501
        """get information about orphaned sign keys, certificates and csrs left behind a delete client  # noqa: E501

        <h3>Administrator has deleted a client and wants to know if some orphaned sign keys, certificates or csrs exist.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_orphans_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :return: OrphanInformation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_orphans" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_client_orphans`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id}/orphans', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrphanInformation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_service_clients(self, id, **kwargs):  # noqa: E501
        """get service clients for the selected client's services  # noqa: E501

        <h3>Administrator views the service clients for the client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_service_clients(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :return: list[ServiceClient]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_service_clients_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_service_clients_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_client_service_clients_with_http_info(self, id, **kwargs):  # noqa: E501
        """get service clients for the selected client's services  # noqa: E501

        <h3>Administrator views the service clients for the client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_service_clients_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :return: list[ServiceClient]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_service_clients" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_client_service_clients`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id}/service-clients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ServiceClient]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_service_descriptions(self, id, **kwargs):  # noqa: E501
        """get security server client service descriptions  # noqa: E501

        <h3>Administrator views the service descriptions for the client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_service_descriptions(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :return: list[ServiceDescription]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_service_descriptions_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_service_descriptions_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_client_service_descriptions_with_http_info(self, id, **kwargs):  # noqa: E501
        """get security server client service descriptions  # noqa: E501

        <h3>Administrator views the service descriptions for the client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_service_descriptions_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :return: list[ServiceDescription]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_service_descriptions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_client_service_descriptions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id}/service-descriptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ServiceDescription]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_sign_certificates(self, id, **kwargs):  # noqa: E501
        """get security server client certificates information  # noqa: E501

        <h3>Administrator views the certificates for the client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_sign_certificates(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :return: list[TokenCertificate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_sign_certificates_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_sign_certificates_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_client_sign_certificates_with_http_info(self, id, **kwargs):  # noqa: E501
        """get security server client certificates information  # noqa: E501

        <h3>Administrator views the certificates for the client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_sign_certificates_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :return: list[TokenCertificate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_sign_certificates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_client_sign_certificates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id}/sign-certificates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TokenCertificate]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_tls_certificate(self, id, hash, **kwargs):  # noqa: E501
        """get TLS certificate  # noqa: E501

        <h3>Administrator gets the TLS certificate for the selected client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_tls_certificate(id, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :param str hash: SHA-1 hash of the certificate (required)
        :return: CertificateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_tls_certificate_with_http_info(id, hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_tls_certificate_with_http_info(id, hash, **kwargs)  # noqa: E501
            return data

    def get_client_tls_certificate_with_http_info(self, id, hash, **kwargs):  # noqa: E501
        """get TLS certificate  # noqa: E501

        <h3>Administrator gets the TLS certificate for the selected client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_tls_certificate_with_http_info(id, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :param str hash: SHA-1 hash of the certificate (required)
        :return: CertificateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'hash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_tls_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_client_tls_certificate`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `get_client_tls_certificate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id}/tls-certificates/{hash}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificateDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_tls_certificates(self, id, **kwargs):  # noqa: E501
        """get security server client TLS certificates information  # noqa: E501

        <h3>Administrator views the TLS certificates for the client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_tls_certificates(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :return: list[CertificateDetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_tls_certificates_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_tls_certificates_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_client_tls_certificates_with_http_info(self, id, **kwargs):  # noqa: E501
        """get security server client TLS certificates information  # noqa: E501

        <h3>Administrator views the TLS certificates for the client.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_tls_certificates_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :return: list[CertificateDetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_tls_certificates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_client_tls_certificates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id}/tls-certificates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CertificateDetails]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_client(self, id, sc_id, **kwargs):  # noqa: E501
        """get single service client by client id and service client id  # noqa: E501

        <h3>Administrator views the information for a single service client.<h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_client(id, sc_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :param str sc_id: id of the service client (required)
        :return: ServiceClient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_client_with_http_info(id, sc_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_client_with_http_info(id, sc_id, **kwargs)  # noqa: E501
            return data

    def get_service_client_with_http_info(self, id, sc_id, **kwargs):  # noqa: E501
        """get single service client by client id and service client id  # noqa: E501

        <h3>Administrator views the information for a single service client.<h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_client_with_http_info(id, sc_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :param str sc_id: id of the service client (required)
        :return: ServiceClient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sc_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_service_client`")  # noqa: E501
        # verify the required parameter 'sc_id' is set
        if ('sc_id' not in params or
                params['sc_id'] is None):
            raise ValueError("Missing the required parameter `sc_id` when calling `get_service_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'sc_id' in params:
            path_params['sc_id'] = params['sc_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id}/service-clients/{sc_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceClient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_client_access_rights(self, id, sc_id, **kwargs):  # noqa: E501
        """get access rights for the selected service client.  # noqa: E501

        <h3>Administrator views service client's access rights.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_client_access_rights(id, sc_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client who owns the services (required)
        :param str sc_id: id of the service client (required)
        :return: list[AccessRight]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_client_access_rights_with_http_info(id, sc_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_client_access_rights_with_http_info(id, sc_id, **kwargs)  # noqa: E501
            return data

    def get_service_client_access_rights_with_http_info(self, id, sc_id, **kwargs):  # noqa: E501
        """get access rights for the selected service client.  # noqa: E501

        <h3>Administrator views service client's access rights.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_client_access_rights_with_http_info(id, sc_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client who owns the services (required)
        :param str sc_id: id of the service client (required)
        :return: list[AccessRight]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sc_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_client_access_rights" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_service_client_access_rights`")  # noqa: E501
        # verify the required parameter 'sc_id' is set
        if ('sc_id' not in params or
                params['sc_id'] is None):
            raise ValueError("Missing the required parameter `sc_id` when calling `get_service_client_access_rights`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'sc_id' in params:
            path_params['sc_id'] = params['sc_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id}/service-clients/{sc_id}/access-rights', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AccessRight]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_client(self, id, **kwargs):  # noqa: E501
        """register security server client  # noqa: E501

        <h3>Administrator registers client.</h3> <p>This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_client(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_client_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.register_client_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def register_client_with_http_info(self, id, **kwargs):  # noqa: E501
        """register security server client  # noqa: E501

        <h3>Administrator registers client.</h3> <p>This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_client_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `register_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id}/register', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unregister_client(self, id, **kwargs):  # noqa: E501
        """unregister security server client  # noqa: E501

        <h3>Administrator unregisters client.</h3> <p>This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unregister_client(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unregister_client_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.unregister_client_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def unregister_client_with_http_info(self, id, **kwargs):  # noqa: E501
        """unregister security server client  # noqa: E501

        <h3>Administrator unregisters client.</h3> <p>This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unregister_client_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unregister_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `unregister_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id}/unregister', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_client(self, id, **kwargs):  # noqa: E501
        """update security server client information  # noqa: E501

        <h3>Administrator updates the client information.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :param ConnectionTypeWrapper body:
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_client_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_client_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_client_with_http_info(self, id, **kwargs):  # noqa: E501
        """update security server client information  # noqa: E501

        <h3>Administrator updates the client information.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the client (required)
        :param ConnectionTypeWrapper body:
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Client',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
