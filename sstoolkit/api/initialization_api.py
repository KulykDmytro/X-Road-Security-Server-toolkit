# coding: utf-8

"""
    X-Road Security Server Admin API

    X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.  # noqa: E501

    OpenAPI spec version: 1.0.30
    Contact: info@niis.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sstoolkit.api_client.api_client import ApiClient


class InitializationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_initialization_status(self, **kwargs):  # noqa: E501
        """Check the initialization status of the Security Server  # noqa: E501

        <h3>Administrator checks the initialization status of the Security Server.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_initialization_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InitializationStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_initialization_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_initialization_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_initialization_status_with_http_info(self, **kwargs):  # noqa: E501
        """Check the initialization status of the Security Server  # noqa: E501

        <h3>Administrator checks the initialization status of the Security Server.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_initialization_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InitializationStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_initialization_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/initialization/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InitializationStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def init_security_server(self, **kwargs):  # noqa: E501
        """Initialize a new security server with the provided initial configuration  # noqa: E501

        <h3>Administrator initializes a new Security Server with the provided initial configuration.</h3> <p> This endpoint can also return metadata in the error response. The metadata array can contain error messages about why the init did not succeed. If the pin code is too weak, the error code <code>weak_pin</code> is used and the entries in the metadata array are always ordered in following way <ul> <li>metadata has a list of strings [\"pin_min_length\", x, \"pin_min_char_classes_count\", y] where</li> <li>x = the minimum length of the pin code</li> <li>y = the minimum amount of character classes (e.g. uppercase, number, special characters) to be used in the pin code</li> </ul> Other possible error code is <code>invalid_init_params</code> which can have any one or more of the following strings in the metadata field <ul> <li>server_code_not_provided</li> <li>member_class_not_provided</li> <li>member_code_not_provided</li> <li>pin_code_not_provided</li> <li>server_code_exists</li> <li>member_class_exists</li> <li>member_code_exists</li> <li>pin_code_exists</li> </ul> </p> <p> This endpoint can return a warnings response which can be ignored by setting <code>InitialServerConf.ignore_warnings</code> = true. If <code>InitialServerConf.ignore_warnings</code> = false, a warnings response will be returned if any one of the following conditions is true <ul> <li>server code has already been set for this Security Server (warning code <code>init_serverconf_exists</code>)</li> <li>server owner has already been set for this Security Server(warning code <code>init_server_owner_exists</code>)</li> <li>software token has already been initialized in this Security Server(warning code <code>init_software_token_initialized</code>)</li> <li>the provided owner member is unregistered(warning code <code>init_unregistered_member</code>)</li> <li>the provided server id is already in use by another Security Server(warning code <code>init_server_id_exists</code>)</li> </ul> </p> <strong>See the '400' response examples</strong>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.init_security_server(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InitialServerConf body: initial security server configuration
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.init_security_server_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.init_security_server_with_http_info(**kwargs)  # noqa: E501
            return data

    def init_security_server_with_http_info(self, **kwargs):  # noqa: E501
        """Initialize a new security server with the provided initial configuration  # noqa: E501

        <h3>Administrator initializes a new Security Server with the provided initial configuration.</h3> <p> This endpoint can also return metadata in the error response. The metadata array can contain error messages about why the init did not succeed. If the pin code is too weak, the error code <code>weak_pin</code> is used and the entries in the metadata array are always ordered in following way <ul> <li>metadata has a list of strings [\"pin_min_length\", x, \"pin_min_char_classes_count\", y] where</li> <li>x = the minimum length of the pin code</li> <li>y = the minimum amount of character classes (e.g. uppercase, number, special characters) to be used in the pin code</li> </ul> Other possible error code is <code>invalid_init_params</code> which can have any one or more of the following strings in the metadata field <ul> <li>server_code_not_provided</li> <li>member_class_not_provided</li> <li>member_code_not_provided</li> <li>pin_code_not_provided</li> <li>server_code_exists</li> <li>member_class_exists</li> <li>member_code_exists</li> <li>pin_code_exists</li> </ul> </p> <p> This endpoint can return a warnings response which can be ignored by setting <code>InitialServerConf.ignore_warnings</code> = true. If <code>InitialServerConf.ignore_warnings</code> = false, a warnings response will be returned if any one of the following conditions is true <ul> <li>server code has already been set for this Security Server (warning code <code>init_serverconf_exists</code>)</li> <li>server owner has already been set for this Security Server(warning code <code>init_server_owner_exists</code>)</li> <li>software token has already been initialized in this Security Server(warning code <code>init_software_token_initialized</code>)</li> <li>the provided owner member is unregistered(warning code <code>init_unregistered_member</code>)</li> <li>the provided server id is already in use by another Security Server(warning code <code>init_server_id_exists</code>)</li> </ul> </p> <strong>See the '400' response examples</strong>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.init_security_server_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InitialServerConf body: initial security server configuration
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method init_security_server" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/initialization', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
