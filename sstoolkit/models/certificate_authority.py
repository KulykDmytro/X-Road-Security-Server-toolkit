# coding: utf-8

"""
    X-Road Security Server Admin API

    X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.  # noqa: E501

    OpenAPI spec version: 1.0.30
    Contact: info@niis.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CertificateAuthority(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'subject_distinguished_name': 'str',
        'issuer_distinguished_name': 'str',
        'ocsp_response': 'CertificateAuthorityOcspResponse',
        'not_after': 'datetime',
        'top_ca': 'bool',
        'path': 'str',
        'authentication_only': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'subject_distinguished_name': 'subject_distinguished_name',
        'issuer_distinguished_name': 'issuer_distinguished_name',
        'ocsp_response': 'ocsp_response',
        'not_after': 'not_after',
        'top_ca': 'top_ca',
        'path': 'path',
        'authentication_only': 'authentication_only'
    }

    def __init__(self, name=None, subject_distinguished_name=None, issuer_distinguished_name=None, ocsp_response=None, not_after=None, top_ca=None, path=None, authentication_only=None):  # noqa: E501
        """CertificateAuthority - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._subject_distinguished_name = None
        self._issuer_distinguished_name = None
        self._ocsp_response = None
        self._not_after = None
        self._top_ca = None
        self._path = None
        self._authentication_only = None
        self.discriminator = None
        self.name = name
        self.subject_distinguished_name = subject_distinguished_name
        self.issuer_distinguished_name = issuer_distinguished_name
        self.ocsp_response = ocsp_response
        self.not_after = not_after
        self.top_ca = top_ca
        self.path = path
        self.authentication_only = authentication_only

    @property
    def name(self):
        """Gets the name of this CertificateAuthority.  # noqa: E501

        name of the CA, as defined in global conf. Used also as an identifier  # noqa: E501

        :return: The name of this CertificateAuthority.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CertificateAuthority.

        name of the CA, as defined in global conf. Used also as an identifier  # noqa: E501

        :param name: The name of this CertificateAuthority.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def subject_distinguished_name(self):
        """Gets the subject_distinguished_name of this CertificateAuthority.  # noqa: E501

        subject distinguished name  # noqa: E501

        :return: The subject_distinguished_name of this CertificateAuthority.  # noqa: E501
        :rtype: str
        """
        return self._subject_distinguished_name

    @subject_distinguished_name.setter
    def subject_distinguished_name(self, subject_distinguished_name):
        """Sets the subject_distinguished_name of this CertificateAuthority.

        subject distinguished name  # noqa: E501

        :param subject_distinguished_name: The subject_distinguished_name of this CertificateAuthority.  # noqa: E501
        :type: str
        """
        if subject_distinguished_name is None:
            raise ValueError("Invalid value for `subject_distinguished_name`, must not be `None`")  # noqa: E501

        self._subject_distinguished_name = subject_distinguished_name

    @property
    def issuer_distinguished_name(self):
        """Gets the issuer_distinguished_name of this CertificateAuthority.  # noqa: E501

        issuer distinguished name  # noqa: E501

        :return: The issuer_distinguished_name of this CertificateAuthority.  # noqa: E501
        :rtype: str
        """
        return self._issuer_distinguished_name

    @issuer_distinguished_name.setter
    def issuer_distinguished_name(self, issuer_distinguished_name):
        """Sets the issuer_distinguished_name of this CertificateAuthority.

        issuer distinguished name  # noqa: E501

        :param issuer_distinguished_name: The issuer_distinguished_name of this CertificateAuthority.  # noqa: E501
        :type: str
        """
        if issuer_distinguished_name is None:
            raise ValueError("Invalid value for `issuer_distinguished_name`, must not be `None`")  # noqa: E501

        self._issuer_distinguished_name = issuer_distinguished_name

    @property
    def ocsp_response(self):
        """Gets the ocsp_response of this CertificateAuthority.  # noqa: E501


        :return: The ocsp_response of this CertificateAuthority.  # noqa: E501
        :rtype: CertificateAuthorityOcspResponse
        """
        return self._ocsp_response

    @ocsp_response.setter
    def ocsp_response(self, ocsp_response):
        """Sets the ocsp_response of this CertificateAuthority.


        :param ocsp_response: The ocsp_response of this CertificateAuthority.  # noqa: E501
        :type: CertificateAuthorityOcspResponse
        """
        if ocsp_response is None:
            raise ValueError("Invalid value for `ocsp_response`, must not be `None`")  # noqa: E501

        self._ocsp_response = ocsp_response

    @property
    def not_after(self):
        """Gets the not_after of this CertificateAuthority.  # noqa: E501

        certificate authority expires at  # noqa: E501

        :return: The not_after of this CertificateAuthority.  # noqa: E501
        :rtype: datetime
        """
        return self._not_after

    @not_after.setter
    def not_after(self, not_after):
        """Sets the not_after of this CertificateAuthority.

        certificate authority expires at  # noqa: E501

        :param not_after: The not_after of this CertificateAuthority.  # noqa: E501
        :type: datetime
        """
        if not_after is None:
            raise ValueError("Invalid value for `not_after`, must not be `None`")  # noqa: E501

        self._not_after = not_after

    @property
    def top_ca(self):
        """Gets the top_ca of this CertificateAuthority.  # noqa: E501

        if the certificate authority is top CA (instead of intermediate)  # noqa: E501

        :return: The top_ca of this CertificateAuthority.  # noqa: E501
        :rtype: bool
        """
        return self._top_ca

    @top_ca.setter
    def top_ca(self, top_ca):
        """Sets the top_ca of this CertificateAuthority.

        if the certificate authority is top CA (instead of intermediate)  # noqa: E501

        :param top_ca: The top_ca of this CertificateAuthority.  # noqa: E501
        :type: bool
        """
        if top_ca is None:
            raise ValueError("Invalid value for `top_ca`, must not be `None`")  # noqa: E501

        self._top_ca = top_ca

    @property
    def path(self):
        """Gets the path of this CertificateAuthority.  # noqa: E501

        encoded path string from this CA to top CA  # noqa: E501

        :return: The path of this CertificateAuthority.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this CertificateAuthority.

        encoded path string from this CA to top CA  # noqa: E501

        :param path: The path of this CertificateAuthority.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def authentication_only(self):
        """Gets the authentication_only of this CertificateAuthority.  # noqa: E501

        if certificate authority is limited for authentication use only  # noqa: E501

        :return: The authentication_only of this CertificateAuthority.  # noqa: E501
        :rtype: bool
        """
        return self._authentication_only

    @authentication_only.setter
    def authentication_only(self, authentication_only):
        """Sets the authentication_only of this CertificateAuthority.

        if certificate authority is limited for authentication use only  # noqa: E501

        :param authentication_only: The authentication_only of this CertificateAuthority.  # noqa: E501
        :type: bool
        """
        if authentication_only is None:
            raise ValueError("Invalid value for `authentication_only`, must not be `None`")  # noqa: E501

        self._authentication_only = authentication_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateAuthority, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateAuthority):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
