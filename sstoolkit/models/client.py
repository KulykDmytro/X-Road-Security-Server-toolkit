# coding: utf-8

"""
    X-Road Security Server Admin API

    X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.  # noqa: E501

    OpenAPI spec version: 1.0.30
    Contact: info@niis.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Client(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'instance_id': 'str',
        'member_name': 'str',
        'member_class': 'str',
        'member_code': 'str',
        'subsystem_code': 'str',
        'owner': 'bool',
        'has_valid_local_sign_cert': 'bool',
        'connection_type': 'ConnectionType',
        'status': 'ClientStatus'
    }

    attribute_map = {
        'id': 'id',
        'instance_id': 'instance_id',
        'member_name': 'member_name',
        'member_class': 'member_class',
        'member_code': 'member_code',
        'subsystem_code': 'subsystem_code',
        'owner': 'owner',
        'has_valid_local_sign_cert': 'has_valid_local_sign_cert',
        'connection_type': 'connection_type',
        'status': 'status'
    }

    def __init__(self, id=None, instance_id=None, member_name=None, member_class=None, member_code=None, subsystem_code=None, owner=None, has_valid_local_sign_cert=None, connection_type=None, status=None):  # noqa: E501
        """Client - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._instance_id = None
        self._member_name = None
        self._member_class = None
        self._member_code = None
        self._subsystem_code = None
        self._owner = None
        self._has_valid_local_sign_cert = None
        self._connection_type = None
        self._status = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if instance_id is not None:
            self.instance_id = instance_id
        if member_name is not None:
            self.member_name = member_name
        self.member_class = member_class
        self.member_code = member_code
        if subsystem_code is not None:
            self.subsystem_code = subsystem_code
        if owner is not None:
            self.owner = owner
        if has_valid_local_sign_cert is not None:
            self.has_valid_local_sign_cert = has_valid_local_sign_cert
        if connection_type is not None:
            self.connection_type = connection_type
        if status is not None:
            self.status = status

    @property
    def id(self):
        """Gets the id of this Client.  # noqa: E501

        <instance_id>:<member_class>:<member_code>:<subsystem>(optional). Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters  # noqa: E501

        :return: The id of this Client.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Client.

        <instance_id>:<member_class>:<member_code>:<subsystem>(optional). Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters  # noqa: E501

        :param id: The id of this Client.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def instance_id(self):
        """Gets the instance_id of this Client.  # noqa: E501

        Xroad instance id. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters  # noqa: E501

        :return: The instance_id of this Client.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this Client.

        Xroad instance id. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters  # noqa: E501

        :param instance_id: The instance_id of this Client.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def member_name(self):
        """Gets the member_name of this Client.  # noqa: E501

        Member name. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters  # noqa: E501

        :return: The member_name of this Client.  # noqa: E501
        :rtype: str
        """
        return self._member_name

    @member_name.setter
    def member_name(self, member_name):
        """Sets the member_name of this Client.

        Member name. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters  # noqa: E501

        :param member_name: The member_name of this Client.  # noqa: E501
        :type: str
        """

        self._member_name = member_name

    @property
    def member_class(self):
        """Gets the member_class of this Client.  # noqa: E501

        Member class. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters  # noqa: E501

        :return: The member_class of this Client.  # noqa: E501
        :rtype: str
        """
        return self._member_class

    @member_class.setter
    def member_class(self, member_class):
        """Sets the member_class of this Client.

        Member class. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters  # noqa: E501

        :param member_class: The member_class of this Client.  # noqa: E501
        :type: str
        """
        if member_class is None:
            raise ValueError("Invalid value for `member_class`, must not be `None`")  # noqa: E501

        self._member_class = member_class

    @property
    def member_code(self):
        """Gets the member_code of this Client.  # noqa: E501

        Member code. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters  # noqa: E501

        :return: The member_code of this Client.  # noqa: E501
        :rtype: str
        """
        return self._member_code

    @member_code.setter
    def member_code(self, member_code):
        """Sets the member_code of this Client.

        Member code. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters  # noqa: E501

        :param member_code: The member_code of this Client.  # noqa: E501
        :type: str
        """
        if member_code is None:
            raise ValueError("Invalid value for `member_code`, must not be `None`")  # noqa: E501

        self._member_code = member_code

    @property
    def subsystem_code(self):
        """Gets the subsystem_code of this Client.  # noqa: E501

        Subsystem code. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters  # noqa: E501

        :return: The subsystem_code of this Client.  # noqa: E501
        :rtype: str
        """
        return self._subsystem_code

    @subsystem_code.setter
    def subsystem_code(self, subsystem_code):
        """Sets the subsystem_code of this Client.

        Subsystem code. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters  # noqa: E501

        :param subsystem_code: The subsystem_code of this Client.  # noqa: E501
        :type: str
        """

        self._subsystem_code = subsystem_code

    @property
    def owner(self):
        """Gets the owner of this Client.  # noqa: E501

        if this client is the owner member of this security server  # noqa: E501

        :return: The owner of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Client.

        if this client is the owner member of this security server  # noqa: E501

        :param owner: The owner of this Client.  # noqa: E501
        :type: bool
        """

        self._owner = owner

    @property
    def has_valid_local_sign_cert(self):
        """Gets the has_valid_local_sign_cert of this Client.  # noqa: E501

        if this client is local and has a valid sign cert  # noqa: E501

        :return: The has_valid_local_sign_cert of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._has_valid_local_sign_cert

    @has_valid_local_sign_cert.setter
    def has_valid_local_sign_cert(self, has_valid_local_sign_cert):
        """Sets the has_valid_local_sign_cert of this Client.

        if this client is local and has a valid sign cert  # noqa: E501

        :param has_valid_local_sign_cert: The has_valid_local_sign_cert of this Client.  # noqa: E501
        :type: bool
        """

        self._has_valid_local_sign_cert = has_valid_local_sign_cert

    @property
    def connection_type(self):
        """Gets the connection_type of this Client.  # noqa: E501


        :return: The connection_type of this Client.  # noqa: E501
        :rtype: ConnectionType
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this Client.


        :param connection_type: The connection_type of this Client.  # noqa: E501
        :type: ConnectionType
        """

        self._connection_type = connection_type

    @property
    def status(self):
        """Gets the status of this Client.  # noqa: E501


        :return: The status of this Client.  # noqa: E501
        :rtype: ClientStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Client.


        :param status: The status of this Client.  # noqa: E501
        :type: ClientStatus
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Client, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Client):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
