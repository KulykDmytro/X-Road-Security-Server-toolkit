# coding: utf-8

"""
    X-Road Security Server Admin API

    X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.  # noqa: E501

    OpenAPI spec version: 1.0.31
    Contact: info@niis.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CertificateDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'issuer_distinguished_name': 'str',
        'issuer_common_name': 'str',
        'subject_distinguished_name': 'str',
        'subject_common_name': 'str',
        'not_before': 'datetime',
        'not_after': 'datetime',
        'serial': 'str',
        'version': 'int',
        'signature_algorithm': 'str',
        'signature': 'str',
        'public_key_algorithm': 'str',
        'rsa_public_key_modulus': 'str',
        'rsa_public_key_exponent': 'int',
        'hash': 'str',
        'key_usages': 'list[KeyUsage]',
        'subject_alternative_names': 'str'
    }

    attribute_map = {
        'issuer_distinguished_name': 'issuer_distinguished_name',
        'issuer_common_name': 'issuer_common_name',
        'subject_distinguished_name': 'subject_distinguished_name',
        'subject_common_name': 'subject_common_name',
        'not_before': 'not_before',
        'not_after': 'not_after',
        'serial': 'serial',
        'version': 'version',
        'signature_algorithm': 'signature_algorithm',
        'signature': 'signature',
        'public_key_algorithm': 'public_key_algorithm',
        'rsa_public_key_modulus': 'rsa_public_key_modulus',
        'rsa_public_key_exponent': 'rsa_public_key_exponent',
        'hash': 'hash',
        'key_usages': 'key_usages',
        'subject_alternative_names': 'subject_alternative_names'
    }

    def __init__(self, issuer_distinguished_name=None, issuer_common_name=None, subject_distinguished_name=None, subject_common_name=None, not_before=None, not_after=None, serial=None, version=None, signature_algorithm=None, signature=None, public_key_algorithm=None, rsa_public_key_modulus=None, rsa_public_key_exponent=None, hash=None, key_usages=None, subject_alternative_names=None):  # noqa: E501
        """CertificateDetails - a model defined in Swagger"""  # noqa: E501
        self._issuer_distinguished_name = None
        self._issuer_common_name = None
        self._subject_distinguished_name = None
        self._subject_common_name = None
        self._not_before = None
        self._not_after = None
        self._serial = None
        self._version = None
        self._signature_algorithm = None
        self._signature = None
        self._public_key_algorithm = None
        self._rsa_public_key_modulus = None
        self._rsa_public_key_exponent = None
        self._hash = None
        self._key_usages = None
        self._subject_alternative_names = None
        self.discriminator = None
        self.issuer_distinguished_name = issuer_distinguished_name
        self.issuer_common_name = issuer_common_name
        self.subject_distinguished_name = subject_distinguished_name
        self.subject_common_name = subject_common_name
        self.not_before = not_before
        self.not_after = not_after
        self.serial = serial
        self.version = version
        self.signature_algorithm = signature_algorithm
        self.signature = signature
        self.public_key_algorithm = public_key_algorithm
        self.rsa_public_key_modulus = rsa_public_key_modulus
        self.rsa_public_key_exponent = rsa_public_key_exponent
        self.hash = hash
        self.key_usages = key_usages
        self.subject_alternative_names = subject_alternative_names

    @property
    def issuer_distinguished_name(self):
        """Gets the issuer_distinguished_name of this CertificateDetails.  # noqa: E501

        certificate issuer distinguished name  # noqa: E501

        :return: The issuer_distinguished_name of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._issuer_distinguished_name

    @issuer_distinguished_name.setter
    def issuer_distinguished_name(self, issuer_distinguished_name):
        """Sets the issuer_distinguished_name of this CertificateDetails.

        certificate issuer distinguished name  # noqa: E501

        :param issuer_distinguished_name: The issuer_distinguished_name of this CertificateDetails.  # noqa: E501
        :type: str
        """
        if issuer_distinguished_name is None:
            raise ValueError("Invalid value for `issuer_distinguished_name`, must not be `None`")  # noqa: E501

        self._issuer_distinguished_name = issuer_distinguished_name

    @property
    def issuer_common_name(self):
        """Gets the issuer_common_name of this CertificateDetails.  # noqa: E501

        certificate issuer common name  # noqa: E501

        :return: The issuer_common_name of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._issuer_common_name

    @issuer_common_name.setter
    def issuer_common_name(self, issuer_common_name):
        """Sets the issuer_common_name of this CertificateDetails.

        certificate issuer common name  # noqa: E501

        :param issuer_common_name: The issuer_common_name of this CertificateDetails.  # noqa: E501
        :type: str
        """
        if issuer_common_name is None:
            raise ValueError("Invalid value for `issuer_common_name`, must not be `None`")  # noqa: E501

        self._issuer_common_name = issuer_common_name

    @property
    def subject_distinguished_name(self):
        """Gets the subject_distinguished_name of this CertificateDetails.  # noqa: E501

        certificate subject distinguished name  # noqa: E501

        :return: The subject_distinguished_name of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._subject_distinguished_name

    @subject_distinguished_name.setter
    def subject_distinguished_name(self, subject_distinguished_name):
        """Sets the subject_distinguished_name of this CertificateDetails.

        certificate subject distinguished name  # noqa: E501

        :param subject_distinguished_name: The subject_distinguished_name of this CertificateDetails.  # noqa: E501
        :type: str
        """
        if subject_distinguished_name is None:
            raise ValueError("Invalid value for `subject_distinguished_name`, must not be `None`")  # noqa: E501

        self._subject_distinguished_name = subject_distinguished_name

    @property
    def subject_common_name(self):
        """Gets the subject_common_name of this CertificateDetails.  # noqa: E501

        certificate subject common name  # noqa: E501

        :return: The subject_common_name of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._subject_common_name

    @subject_common_name.setter
    def subject_common_name(self, subject_common_name):
        """Sets the subject_common_name of this CertificateDetails.

        certificate subject common name  # noqa: E501

        :param subject_common_name: The subject_common_name of this CertificateDetails.  # noqa: E501
        :type: str
        """
        if subject_common_name is None:
            raise ValueError("Invalid value for `subject_common_name`, must not be `None`")  # noqa: E501

        self._subject_common_name = subject_common_name

    @property
    def not_before(self):
        """Gets the not_before of this CertificateDetails.  # noqa: E501

        certificate validity not before  # noqa: E501

        :return: The not_before of this CertificateDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before):
        """Sets the not_before of this CertificateDetails.

        certificate validity not before  # noqa: E501

        :param not_before: The not_before of this CertificateDetails.  # noqa: E501
        :type: datetime
        """
        if not_before is None:
            raise ValueError("Invalid value for `not_before`, must not be `None`")  # noqa: E501

        self._not_before = not_before

    @property
    def not_after(self):
        """Gets the not_after of this CertificateDetails.  # noqa: E501

        certificate validity not after  # noqa: E501

        :return: The not_after of this CertificateDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._not_after

    @not_after.setter
    def not_after(self, not_after):
        """Sets the not_after of this CertificateDetails.

        certificate validity not after  # noqa: E501

        :param not_after: The not_after of this CertificateDetails.  # noqa: E501
        :type: datetime
        """
        if not_after is None:
            raise ValueError("Invalid value for `not_after`, must not be `None`")  # noqa: E501

        self._not_after = not_after

    @property
    def serial(self):
        """Gets the serial of this CertificateDetails.  # noqa: E501

        serial number  # noqa: E501

        :return: The serial of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this CertificateDetails.

        serial number  # noqa: E501

        :param serial: The serial of this CertificateDetails.  # noqa: E501
        :type: str
        """
        if serial is None:
            raise ValueError("Invalid value for `serial`, must not be `None`")  # noqa: E501

        self._serial = serial

    @property
    def version(self):
        """Gets the version of this CertificateDetails.  # noqa: E501

        version  # noqa: E501

        :return: The version of this CertificateDetails.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CertificateDetails.

        version  # noqa: E501

        :param version: The version of this CertificateDetails.  # noqa: E501
        :type: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this CertificateDetails.  # noqa: E501

        certificate signature algorithm  # noqa: E501

        :return: The signature_algorithm of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this CertificateDetails.

        certificate signature algorithm  # noqa: E501

        :param signature_algorithm: The signature_algorithm of this CertificateDetails.  # noqa: E501
        :type: str
        """
        if signature_algorithm is None:
            raise ValueError("Invalid value for `signature_algorithm`, must not be `None`")  # noqa: E501

        self._signature_algorithm = signature_algorithm

    @property
    def signature(self):
        """Gets the signature of this CertificateDetails.  # noqa: E501

        hex encoded certificate signature  # noqa: E501

        :return: The signature of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this CertificateDetails.

        hex encoded certificate signature  # noqa: E501

        :param signature: The signature of this CertificateDetails.  # noqa: E501
        :type: str
        """
        if signature is None:
            raise ValueError("Invalid value for `signature`, must not be `None`")  # noqa: E501

        self._signature = signature

    @property
    def public_key_algorithm(self):
        """Gets the public_key_algorithm of this CertificateDetails.  # noqa: E501

        certificate public key algorithm  # noqa: E501

        :return: The public_key_algorithm of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._public_key_algorithm

    @public_key_algorithm.setter
    def public_key_algorithm(self, public_key_algorithm):
        """Sets the public_key_algorithm of this CertificateDetails.

        certificate public key algorithm  # noqa: E501

        :param public_key_algorithm: The public_key_algorithm of this CertificateDetails.  # noqa: E501
        :type: str
        """
        if public_key_algorithm is None:
            raise ValueError("Invalid value for `public_key_algorithm`, must not be `None`")  # noqa: E501

        self._public_key_algorithm = public_key_algorithm

    @property
    def rsa_public_key_modulus(self):
        """Gets the rsa_public_key_modulus of this CertificateDetails.  # noqa: E501

        hex encoded RSA public key modulus (if RSA key)  # noqa: E501

        :return: The rsa_public_key_modulus of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._rsa_public_key_modulus

    @rsa_public_key_modulus.setter
    def rsa_public_key_modulus(self, rsa_public_key_modulus):
        """Sets the rsa_public_key_modulus of this CertificateDetails.

        hex encoded RSA public key modulus (if RSA key)  # noqa: E501

        :param rsa_public_key_modulus: The rsa_public_key_modulus of this CertificateDetails.  # noqa: E501
        :type: str
        """
        if rsa_public_key_modulus is None:
            raise ValueError("Invalid value for `rsa_public_key_modulus`, must not be `None`")  # noqa: E501

        self._rsa_public_key_modulus = rsa_public_key_modulus

    @property
    def rsa_public_key_exponent(self):
        """Gets the rsa_public_key_exponent of this CertificateDetails.  # noqa: E501

        RSA public key exponent (if RSA key) as an integer  # noqa: E501

        :return: The rsa_public_key_exponent of this CertificateDetails.  # noqa: E501
        :rtype: int
        """
        return self._rsa_public_key_exponent

    @rsa_public_key_exponent.setter
    def rsa_public_key_exponent(self, rsa_public_key_exponent):
        """Sets the rsa_public_key_exponent of this CertificateDetails.

        RSA public key exponent (if RSA key) as an integer  # noqa: E501

        :param rsa_public_key_exponent: The rsa_public_key_exponent of this CertificateDetails.  # noqa: E501
        :type: int
        """
        if rsa_public_key_exponent is None:
            raise ValueError("Invalid value for `rsa_public_key_exponent`, must not be `None`")  # noqa: E501

        self._rsa_public_key_exponent = rsa_public_key_exponent

    @property
    def hash(self):
        """Gets the hash of this CertificateDetails.  # noqa: E501

        certificate SHA-1 hash  # noqa: E501

        :return: The hash of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this CertificateDetails.

        certificate SHA-1 hash  # noqa: E501

        :param hash: The hash of this CertificateDetails.  # noqa: E501
        :type: str
        """
        if hash is None:
            raise ValueError("Invalid value for `hash`, must not be `None`")  # noqa: E501

        self._hash = hash

    @property
    def key_usages(self):
        """Gets the key_usages of this CertificateDetails.  # noqa: E501

        certificate key usage array  # noqa: E501

        :return: The key_usages of this CertificateDetails.  # noqa: E501
        :rtype: list[KeyUsage]
        """
        return self._key_usages

    @key_usages.setter
    def key_usages(self, key_usages):
        """Sets the key_usages of this CertificateDetails.

        certificate key usage array  # noqa: E501

        :param key_usages: The key_usages of this CertificateDetails.  # noqa: E501
        :type: list[KeyUsage]
        """
        if key_usages is None:
            raise ValueError("Invalid value for `key_usages`, must not be `None`")  # noqa: E501

        self._key_usages = key_usages

    @property
    def subject_alternative_names(self):
        """Gets the subject_alternative_names of this CertificateDetails.  # noqa: E501

        certificate subject alternative names  # noqa: E501

        :return: The subject_alternative_names of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._subject_alternative_names

    @subject_alternative_names.setter
    def subject_alternative_names(self, subject_alternative_names):
        """Sets the subject_alternative_names of this CertificateDetails.

        certificate subject alternative names  # noqa: E501

        :param subject_alternative_names: The subject_alternative_names of this CertificateDetails.  # noqa: E501
        :type: str
        """
        #if subject_alternative_names is None:
        #   raise ValueError("Invalid value for `subject_alternative_names`, must not be `None`")  # noqa: E501
        # TEST CA does not fill SAN

        self._subject_alternative_names = subject_alternative_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
