# coding: utf-8

"""
    X-Road Security Server Admin API

    X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.  # noqa: E501

    OpenAPI spec version: 1.0.31
    Contact: info@niis.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class KeyLabelWithCsrGenerate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key_label': 'str',
        'csr_generate_request': 'CsrGenerate'
    }

    attribute_map = {
        'key_label': 'key_label',
        'csr_generate_request': 'csr_generate_request'
    }

    def __init__(self, key_label=None, csr_generate_request=None):  # noqa: E501
        """KeyLabelWithCsrGenerate - a model defined in Swagger"""  # noqa: E501
        self._key_label = None
        self._csr_generate_request = None
        self.discriminator = None
        self.key_label = key_label
        self.csr_generate_request = csr_generate_request

    @property
    def key_label(self):
        """Gets the key_label of this KeyLabelWithCsrGenerate.  # noqa: E501

        label for the new key  # noqa: E501

        :return: The key_label of this KeyLabelWithCsrGenerate.  # noqa: E501
        :rtype: str
        """
        return self._key_label

    @key_label.setter
    def key_label(self, key_label):
        """Sets the key_label of this KeyLabelWithCsrGenerate.

        label for the new key  # noqa: E501

        :param key_label: The key_label of this KeyLabelWithCsrGenerate.  # noqa: E501
        :type: str
        """
        if key_label is None:
            raise ValueError("Invalid value for `key_label`, must not be `None`")  # noqa: E501

        self._key_label = key_label

    @property
    def csr_generate_request(self):
        """Gets the csr_generate_request of this KeyLabelWithCsrGenerate.  # noqa: E501


        :return: The csr_generate_request of this KeyLabelWithCsrGenerate.  # noqa: E501
        :rtype: CsrGenerate
        """
        return self._csr_generate_request

    @csr_generate_request.setter
    def csr_generate_request(self, csr_generate_request):
        """Sets the csr_generate_request of this KeyLabelWithCsrGenerate.


        :param csr_generate_request: The csr_generate_request of this KeyLabelWithCsrGenerate.  # noqa: E501
        :type: CsrGenerate
        """
        if csr_generate_request is None:
            raise ValueError("Invalid value for `csr_generate_request`, must not be `None`")  # noqa: E501

        self._csr_generate_request = csr_generate_request

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KeyLabelWithCsrGenerate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeyLabelWithCsrGenerate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
