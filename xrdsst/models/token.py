# coding: utf-8

"""
    X-Road Security Server Admin API

    X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.  # noqa: E501

    OpenAPI spec version: 1.0.31
    Contact: info@niis.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Token(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'type': 'TokenType',
        'keys': 'list[Key]',
        'status': 'TokenStatus',
        'logged_in': 'bool',
        'available': 'bool',
        'saved_to_configuration': 'bool',
        'read_only': 'bool',
        'serial_number': 'str',
        'token_infos': 'list[KeyValuePair]',
        'possible_actions': 'PossibleActions'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'keys': 'keys',
        'status': 'status',
        'logged_in': 'logged_in',
        'available': 'available',
        'saved_to_configuration': 'saved_to_configuration',
        'read_only': 'read_only',
        'serial_number': 'serial_number',
        'token_infos': 'token_infos',
        'possible_actions': 'possible_actions'
    }

    def __init__(self, id=None, name=None, type=None, keys=None, status=None, logged_in=None, available=None, saved_to_configuration=None, read_only=None, serial_number=None, token_infos=None, possible_actions=None):  # noqa: E501
        """Token - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._type = None
        self._keys = None
        self._status = None
        self._logged_in = None
        self._available = None
        self._saved_to_configuration = None
        self._read_only = None
        self._serial_number = None
        self._token_infos = None
        self._possible_actions = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.type = type
        self.keys = keys
        self.status = status
        self.logged_in = logged_in
        self.available = available
        self.saved_to_configuration = saved_to_configuration
        self.read_only = read_only
        if serial_number is not None:
            self.serial_number = serial_number
        if token_infos is not None:
            self.token_infos = token_infos
        if possible_actions is not None:
            self.possible_actions = possible_actions

    @property
    def id(self):
        """Gets the id of this Token.  # noqa: E501

        token id  # noqa: E501

        :return: The id of this Token.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Token.

        token id  # noqa: E501

        :param id: The id of this Token.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Token.  # noqa: E501

        token name  # noqa: E501

        :return: The name of this Token.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Token.

        token name  # noqa: E501

        :param name: The name of this Token.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this Token.  # noqa: E501


        :return: The type of this Token.  # noqa: E501
        :rtype: TokenType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Token.


        :param type: The type of this Token.  # noqa: E501
        :type: TokenType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def keys(self):
        """Gets the keys of this Token.  # noqa: E501

        token keys  # noqa: E501

        :return: The keys of this Token.  # noqa: E501
        :rtype: list[Key]
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this Token.

        token keys  # noqa: E501

        :param keys: The keys of this Token.  # noqa: E501
        :type: list[Key]
        """
        if keys is None:
            raise ValueError("Invalid value for `keys`, must not be `None`")  # noqa: E501

        self._keys = keys

    @property
    def status(self):
        """Gets the status of this Token.  # noqa: E501


        :return: The status of this Token.  # noqa: E501
        :rtype: TokenStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Token.


        :param status: The status of this Token.  # noqa: E501
        :type: TokenStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def logged_in(self):
        """Gets the logged_in of this Token.  # noqa: E501

        if the token has been logged in to  # noqa: E501

        :return: The logged_in of this Token.  # noqa: E501
        :rtype: bool
        """
        return self._logged_in

    @logged_in.setter
    def logged_in(self, logged_in):
        """Sets the logged_in of this Token.

        if the token has been logged in to  # noqa: E501

        :param logged_in: The logged_in of this Token.  # noqa: E501
        :type: bool
        """
        if logged_in is None:
            raise ValueError("Invalid value for `logged_in`, must not be `None`")  # noqa: E501

        self._logged_in = logged_in

    @property
    def available(self):
        """Gets the available of this Token.  # noqa: E501

        if the token is available  # noqa: E501

        :return: The available of this Token.  # noqa: E501
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this Token.

        if the token is available  # noqa: E501

        :param available: The available of this Token.  # noqa: E501
        :type: bool
        """
        if available is None:
            raise ValueError("Invalid value for `available`, must not be `None`")  # noqa: E501

        self._available = available

    @property
    def saved_to_configuration(self):
        """Gets the saved_to_configuration of this Token.  # noqa: E501

        if the token is saved to configuration  # noqa: E501

        :return: The saved_to_configuration of this Token.  # noqa: E501
        :rtype: bool
        """
        return self._saved_to_configuration

    @saved_to_configuration.setter
    def saved_to_configuration(self, saved_to_configuration):
        """Sets the saved_to_configuration of this Token.

        if the token is saved to configuration  # noqa: E501

        :param saved_to_configuration: The saved_to_configuration of this Token.  # noqa: E501
        :type: bool
        """
        if saved_to_configuration is None:
            raise ValueError("Invalid value for `saved_to_configuration`, must not be `None`")  # noqa: E501

        self._saved_to_configuration = saved_to_configuration

    @property
    def read_only(self):
        """Gets the read_only of this Token.  # noqa: E501

        if the token is read-only  # noqa: E501

        :return: The read_only of this Token.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this Token.

        if the token is read-only  # noqa: E501

        :param read_only: The read_only of this Token.  # noqa: E501
        :type: bool
        """
        if read_only is None:
            raise ValueError("Invalid value for `read_only`, must not be `None`")  # noqa: E501

        self._read_only = read_only

    @property
    def serial_number(self):
        """Gets the serial_number of this Token.  # noqa: E501

        serial number of the token  # noqa: E501

        :return: The serial_number of this Token.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this Token.

        serial number of the token  # noqa: E501

        :param serial_number: The serial_number of this Token.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def token_infos(self):
        """Gets the token_infos of this Token.  # noqa: E501

        Contains label-value pairs of information  # noqa: E501

        :return: The token_infos of this Token.  # noqa: E501
        :rtype: list[KeyValuePair]
        """
        return self._token_infos

    @token_infos.setter
    def token_infos(self, token_infos):
        """Sets the token_infos of this Token.

        Contains label-value pairs of information  # noqa: E501

        :param token_infos: The token_infos of this Token.  # noqa: E501
        :type: list[KeyValuePair]
        """

        self._token_infos = token_infos

    @property
    def possible_actions(self):
        """Gets the possible_actions of this Token.  # noqa: E501


        :return: The possible_actions of this Token.  # noqa: E501
        :rtype: PossibleActions
        """
        return self._possible_actions

    @possible_actions.setter
    def possible_actions(self, possible_actions):
        """Sets the possible_actions of this Token.


        :param possible_actions: The possible_actions of this Token.  # noqa: E501
        :type: PossibleActions
        """

        self._possible_actions = possible_actions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Token, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Token):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
