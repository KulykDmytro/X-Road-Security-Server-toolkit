# coding: utf-8

"""
    X-Road Security Server Admin API

    X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.  # noqa: E501

    OpenAPI spec version: 1.0.31
    Contact: info@niis.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceClient(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'local_group_code': 'str',
        'service_client_type': 'ServiceClientType',
        'rights_given_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'local_group_code': 'local_group_code',
        'service_client_type': 'service_client_type',
        'rights_given_at': 'rights_given_at'
    }

    def __init__(self, id=None, name=None, local_group_code=None, service_client_type=None, rights_given_at=None):  # noqa: E501
        """ServiceClient - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._local_group_code = None
        self._service_client_type = None
        self._rights_given_at = None
        self.discriminator = None
        self.id = id
        if name is not None:
            self.name = name
        if local_group_code is not None:
            self.local_group_code = local_group_code
        if service_client_type is not None:
            self.service_client_type = service_client_type
        if rights_given_at is not None:
            self.rights_given_at = rights_given_at

    @property
    def id(self):
        """Gets the id of this ServiceClient.  # noqa: E501

        subject id - can be a subsystem id <instance_id>:<member_class>:<member_code>:<subsystem> | globalgroup id <instance_id>:<group_code> | localgroup resource id in number format <id>  # noqa: E501

        :return: The id of this ServiceClient.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceClient.

        subject id - can be a subsystem id <instance_id>:<member_class>:<member_code>:<subsystem> | globalgroup id <instance_id>:<group_code> | localgroup resource id in number format <id>  # noqa: E501

        :param id: The id of this ServiceClient.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this ServiceClient.  # noqa: E501

        name of the ServiceClient - can be the name of a member or the description of a group  # noqa: E501

        :return: The name of this ServiceClient.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceClient.

        name of the ServiceClient - can be the name of a member or the description of a group  # noqa: E501

        :param name: The name of this ServiceClient.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def local_group_code(self):
        """Gets the local_group_code of this ServiceClient.  # noqa: E501

        group code in case the object is a local group  # noqa: E501

        :return: The local_group_code of this ServiceClient.  # noqa: E501
        :rtype: str
        """
        return self._local_group_code

    @local_group_code.setter
    def local_group_code(self, local_group_code):
        """Sets the local_group_code of this ServiceClient.

        group code in case the object is a local group  # noqa: E501

        :param local_group_code: The local_group_code of this ServiceClient.  # noqa: E501
        :type: str
        """

        self._local_group_code = local_group_code

    @property
    def service_client_type(self):
        """Gets the service_client_type of this ServiceClient.  # noqa: E501


        :return: The service_client_type of this ServiceClient.  # noqa: E501
        :rtype: ServiceClientType
        """
        return self._service_client_type

    @service_client_type.setter
    def service_client_type(self, service_client_type):
        """Sets the service_client_type of this ServiceClient.


        :param service_client_type: The service_client_type of this ServiceClient.  # noqa: E501
        :type: ServiceClientType
        """

        self._service_client_type = service_client_type

    @property
    def rights_given_at(self):
        """Gets the rights_given_at of this ServiceClient.  # noqa: E501

        time when access right were given at. When listing client's service clients without specifying the service, the time when first service access right was given to this service client for any service. When listing service clients for a specific service, time when service client was added permission to that service.  # noqa: E501

        :return: The rights_given_at of this ServiceClient.  # noqa: E501
        :rtype: datetime
        """
        return self._rights_given_at

    @rights_given_at.setter
    def rights_given_at(self, rights_given_at):
        """Sets the rights_given_at of this ServiceClient.

        time when access right were given at. When listing client's service clients without specifying the service, the time when first service access right was given to this service client for any service. When listing service clients for a specific service, time when service client was added permission to that service.  # noqa: E501

        :param rights_given_at: The rights_given_at of this ServiceClient.  # noqa: E501
        :type: datetime
        """

        self._rights_given_at = rights_given_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceClient, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceClient):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
