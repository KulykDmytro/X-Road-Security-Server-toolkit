# coding: utf-8

"""
    X-Road Security Server Admin API

    X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.  # noqa: E501

    OpenAPI spec version: 1.0.30
    Contact: info@niis.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SecurityServer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'instance_id': 'str',
        'member_class': 'str',
        'member_code': 'str',
        'server_code': 'str',
        'server_address': 'str'
    }

    attribute_map = {
        'id': 'id',
        'instance_id': 'instance_id',
        'member_class': 'member_class',
        'member_code': 'member_code',
        'server_code': 'server_code',
        'server_address': 'server_address'
    }

    def __init__(self, id=None, instance_id=None, member_class=None, member_code=None, server_code=None, server_address=None):  # noqa: E501
        """SecurityServer - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._instance_id = None
        self._member_class = None
        self._member_code = None
        self._server_code = None
        self._server_address = None
        self.discriminator = None
        self.id = id
        if instance_id is not None:
            self.instance_id = instance_id
        if member_class is not None:
            self.member_class = member_class
        if member_code is not None:
            self.member_code = member_code
        if server_code is not None:
            self.server_code = server_code
        if server_address is not None:
            self.server_address = server_address

    @property
    def id(self):
        """Gets the id of this SecurityServer.  # noqa: E501

        <instance_id>:<member_class>:<member_code>:<security_server_code>  # noqa: E501

        :return: The id of this SecurityServer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SecurityServer.

        <instance_id>:<member_class>:<member_code>:<security_server_code>  # noqa: E501

        :param id: The id of this SecurityServer.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def instance_id(self):
        """Gets the instance_id of this SecurityServer.  # noqa: E501

        xroad instance id  # noqa: E501

        :return: The instance_id of this SecurityServer.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this SecurityServer.

        xroad instance id  # noqa: E501

        :param instance_id: The instance_id of this SecurityServer.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def member_class(self):
        """Gets the member_class of this SecurityServer.  # noqa: E501

        member class  # noqa: E501

        :return: The member_class of this SecurityServer.  # noqa: E501
        :rtype: str
        """
        return self._member_class

    @member_class.setter
    def member_class(self, member_class):
        """Sets the member_class of this SecurityServer.

        member class  # noqa: E501

        :param member_class: The member_class of this SecurityServer.  # noqa: E501
        :type: str
        """

        self._member_class = member_class

    @property
    def member_code(self):
        """Gets the member_code of this SecurityServer.  # noqa: E501

        member code  # noqa: E501

        :return: The member_code of this SecurityServer.  # noqa: E501
        :rtype: str
        """
        return self._member_code

    @member_code.setter
    def member_code(self, member_code):
        """Sets the member_code of this SecurityServer.

        member code  # noqa: E501

        :param member_code: The member_code of this SecurityServer.  # noqa: E501
        :type: str
        """

        self._member_code = member_code

    @property
    def server_code(self):
        """Gets the server_code of this SecurityServer.  # noqa: E501

        security server code  # noqa: E501

        :return: The server_code of this SecurityServer.  # noqa: E501
        :rtype: str
        """
        return self._server_code

    @server_code.setter
    def server_code(self, server_code):
        """Sets the server_code of this SecurityServer.

        security server code  # noqa: E501

        :param server_code: The server_code of this SecurityServer.  # noqa: E501
        :type: str
        """

        self._server_code = server_code

    @property
    def server_address(self):
        """Gets the server_address of this SecurityServer.  # noqa: E501

        security server address (ip or name)  # noqa: E501

        :return: The server_address of this SecurityServer.  # noqa: E501
        :rtype: str
        """
        return self._server_address

    @server_address.setter
    def server_address(self, server_address):
        """Sets the server_address of this SecurityServer.

        security server address (ip or name)  # noqa: E501

        :param server_address: The server_address of this SecurityServer.  # noqa: E501
        :type: str
        """

        self._server_address = server_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecurityServer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecurityServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
