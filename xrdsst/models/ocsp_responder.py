# coding: utf-8

"""
    X-Road Security Server Admin API

    X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.  # noqa: E501

    OpenAPI spec version: 1.0.30
    Contact: info@niis.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OcspResponder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'status_class': 'AllOfOcspResponderStatusClass',
        'status_code': 'AllOfOcspResponderStatusCode',
        'prev_update_at': 'datetime',
        'next_update_at': 'datetime'
    }

    attribute_map = {
        'url': 'url',
        'status_class': 'status_class',
        'status_code': 'status_code',
        'prev_update_at': 'prev_update_at',
        'next_update_at': 'next_update_at'
    }

    def __init__(self, url=None, status_class=None, status_code=None, prev_update_at=None, next_update_at=None):  # noqa: E501
        """OcspResponder - a model defined in Swagger"""  # noqa: E501
        self._url = None
        self._status_class = None
        self._status_code = None
        self._prev_update_at = None
        self._next_update_at = None
        self.discriminator = None
        self.url = url
        self.status_class = status_class
        self.status_code = status_code
        if prev_update_at is not None:
            self.prev_update_at = prev_update_at
        self.next_update_at = next_update_at

    @property
    def url(self):
        """Gets the url of this OcspResponder.  # noqa: E501

        url of the OCSP responder  # noqa: E501

        :return: The url of this OcspResponder.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this OcspResponder.

        url of the OCSP responder  # noqa: E501

        :param url: The url of this OcspResponder.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def status_class(self):
        """Gets the status_class of this OcspResponder.  # noqa: E501


        :return: The status_class of this OcspResponder.  # noqa: E501
        :rtype: AllOfOcspResponderStatusClass
        """
        return self._status_class

    @status_class.setter
    def status_class(self, status_class):
        """Sets the status_class of this OcspResponder.


        :param status_class: The status_class of this OcspResponder.  # noqa: E501
        :type: AllOfOcspResponderStatusClass
        """
        if status_class is None:
            raise ValueError("Invalid value for `status_class`, must not be `None`")  # noqa: E501

        self._status_class = status_class

    @property
    def status_code(self):
        """Gets the status_code of this OcspResponder.  # noqa: E501


        :return: The status_code of this OcspResponder.  # noqa: E501
        :rtype: AllOfOcspResponderStatusCode
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this OcspResponder.


        :param status_code: The status_code of this OcspResponder.  # noqa: E501
        :type: AllOfOcspResponderStatusCode
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")  # noqa: E501

        self._status_code = status_code

    @property
    def prev_update_at(self):
        """Gets the prev_update_at of this OcspResponder.  # noqa: E501

        last time updated  # noqa: E501

        :return: The prev_update_at of this OcspResponder.  # noqa: E501
        :rtype: datetime
        """
        return self._prev_update_at

    @prev_update_at.setter
    def prev_update_at(self, prev_update_at):
        """Sets the prev_update_at of this OcspResponder.

        last time updated  # noqa: E501

        :param prev_update_at: The prev_update_at of this OcspResponder.  # noqa: E501
        :type: datetime
        """

        self._prev_update_at = prev_update_at

    @property
    def next_update_at(self):
        """Gets the next_update_at of this OcspResponder.  # noqa: E501

        next time updated  # noqa: E501

        :return: The next_update_at of this OcspResponder.  # noqa: E501
        :rtype: datetime
        """
        return self._next_update_at

    @next_update_at.setter
    def next_update_at(self, next_update_at):
        """Sets the next_update_at of this OcspResponder.

        next time updated  # noqa: E501

        :param next_update_at: The next_update_at of this OcspResponder.  # noqa: E501
        :type: datetime
        """
        if next_update_at is None:
            raise ValueError("Invalid value for `next_update_at`, must not be `None`")  # noqa: E501

        self._next_update_at = next_update_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OcspResponder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OcspResponder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
