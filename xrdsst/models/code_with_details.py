# coding: utf-8

"""
    X-Road Security Server Admin API

    X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.  # noqa: E501

    OpenAPI spec version: 1.0.30
    Contact: info@niis.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CodeWithDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'metadata': 'list[str]',
        'validation_errors': 'dict(str, list[str])'
    }

    attribute_map = {
        'code': 'code',
        'metadata': 'metadata',
        'validation_errors': 'validation_errors'
    }

    def __init__(self, code=None, metadata=None, validation_errors=None):  # noqa: E501
        """CodeWithDetails - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._metadata = None
        self._validation_errors = None
        self.discriminator = None
        self.code = code
        if metadata is not None:
            self.metadata = metadata
        if validation_errors is not None:
            self.validation_errors = validation_errors

    @property
    def code(self):
        """Gets the code of this CodeWithDetails.  # noqa: E501

        identifier of the item (for example errorcode)  # noqa: E501

        :return: The code of this CodeWithDetails.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CodeWithDetails.

        identifier of the item (for example errorcode)  # noqa: E501

        :param code: The code of this CodeWithDetails.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def metadata(self):
        """Gets the metadata of this CodeWithDetails.  # noqa: E501

        array containing metadata associated with the item. For example names of services were attempted to add, but failed  # noqa: E501

        :return: The metadata of this CodeWithDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CodeWithDetails.

        array containing metadata associated with the item. For example names of services were attempted to add, but failed  # noqa: E501

        :param metadata: The metadata of this CodeWithDetails.  # noqa: E501
        :type: list[str]
        """

        self._metadata = metadata

    @property
    def validation_errors(self):
        """Gets the validation_errors of this CodeWithDetails.  # noqa: E501

        A dictionary object that contains validation errors bound to their respected fields. The key represents the field where the validation error has happened and the value is a list of validation errors  # noqa: E501

        :return: The validation_errors of this CodeWithDetails.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this CodeWithDetails.

        A dictionary object that contains validation errors bound to their respected fields. The key represents the field where the validation error has happened and the value is a list of validation errors  # noqa: E501

        :param validation_errors: The validation_errors of this CodeWithDetails.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._validation_errors = validation_errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodeWithDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodeWithDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
