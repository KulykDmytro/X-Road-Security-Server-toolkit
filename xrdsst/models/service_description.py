# coding: utf-8

"""
    X-Road Security Server Admin API

    X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.  # noqa: E501

    OpenAPI spec version: 1.0.31
    Contact: info@niis.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceDescription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'url': 'str',
        'type': 'ServiceType',
        'disabled': 'bool',
        'disabled_notice': 'str',
        'refreshed_at': 'datetime',
        'services': 'list[Service]',
        'client_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'url': 'url',
        'type': 'type',
        'disabled': 'disabled',
        'disabled_notice': 'disabled_notice',
        'refreshed_at': 'refreshed_at',
        'services': 'services',
        'client_id': 'client_id'
    }

    def __init__(self, id=None, url=None, type=None, disabled=None, disabled_notice=None, refreshed_at=None, services=None, client_id=None):  # noqa: E501
        """ServiceDescription - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._url = None
        self._type = None
        self._disabled = None
        self._disabled_notice = None
        self._refreshed_at = None
        self._services = None
        self._client_id = None
        self.discriminator = None
        self.id = id
        self.url = url
        self.type = type
        self.disabled = disabled
        self.disabled_notice = disabled_notice
        self.refreshed_at = refreshed_at
        self.services = services
        self.client_id = client_id

    @property
    def id(self):
        """Gets the id of this ServiceDescription.  # noqa: E501

        unique identifier  # noqa: E501

        :return: The id of this ServiceDescription.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceDescription.

        unique identifier  # noqa: E501

        :param id: The id of this ServiceDescription.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def url(self):
        """Gets the url of this ServiceDescription.  # noqa: E501

        service url  # noqa: E501

        :return: The url of this ServiceDescription.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ServiceDescription.

        service url  # noqa: E501

        :param url: The url of this ServiceDescription.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def type(self):
        """Gets the type of this ServiceDescription.  # noqa: E501


        :return: The type of this ServiceDescription.  # noqa: E501
        :rtype: ServiceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServiceDescription.


        :param type: The type of this ServiceDescription.  # noqa: E501
        :type: ServiceType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def disabled(self):
        """Gets the disabled of this ServiceDescription.  # noqa: E501

        service disabled  # noqa: E501

        :return: The disabled of this ServiceDescription.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this ServiceDescription.

        service disabled  # noqa: E501

        :param disabled: The disabled of this ServiceDescription.  # noqa: E501
        :type: bool
        """
        if disabled is None:
            raise ValueError("Invalid value for `disabled`, must not be `None`")  # noqa: E501

        self._disabled = disabled

    @property
    def disabled_notice(self):
        """Gets the disabled_notice of this ServiceDescription.  # noqa: E501

        disabled notice  # noqa: E501

        :return: The disabled_notice of this ServiceDescription.  # noqa: E501
        :rtype: str
        """
        return self._disabled_notice

    @disabled_notice.setter
    def disabled_notice(self, disabled_notice):
        """Sets the disabled_notice of this ServiceDescription.

        disabled notice  # noqa: E501

        :param disabled_notice: The disabled_notice of this ServiceDescription.  # noqa: E501
        :type: str
        """
        if disabled_notice is None:
            raise ValueError("Invalid value for `disabled_notice`, must not be `None`")  # noqa: E501

        self._disabled_notice = disabled_notice

    @property
    def refreshed_at(self):
        """Gets the refreshed_at of this ServiceDescription.  # noqa: E501

        time for service refresh  # noqa: E501

        :return: The refreshed_at of this ServiceDescription.  # noqa: E501
        :rtype: datetime
        """
        return self._refreshed_at

    @refreshed_at.setter
    def refreshed_at(self, refreshed_at):
        """Sets the refreshed_at of this ServiceDescription.

        time for service refresh  # noqa: E501

        :param refreshed_at: The refreshed_at of this ServiceDescription.  # noqa: E501
        :type: datetime
        """
        if refreshed_at is None:
            raise ValueError("Invalid value for `refreshed_at`, must not be `None`")  # noqa: E501

        self._refreshed_at = refreshed_at

    @property
    def services(self):
        """Gets the services of this ServiceDescription.  # noqa: E501

        service description services  # noqa: E501

        :return: The services of this ServiceDescription.  # noqa: E501
        :rtype: list[Service]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this ServiceDescription.

        service description services  # noqa: E501

        :param services: The services of this ServiceDescription.  # noqa: E501
        :type: list[Service]
        """
        if services is None:
            raise ValueError("Invalid value for `services`, must not be `None`")  # noqa: E501

        self._services = services

    @property
    def client_id(self):
        """Gets the client_id of this ServiceDescription.  # noqa: E501

        <instance_id>:<member_class>:<member_code>:<subsystem>(optional)  # noqa: E501

        :return: The client_id of this ServiceDescription.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ServiceDescription.

        <instance_id>:<member_class>:<member_code>:<subsystem>(optional)  # noqa: E501

        :param client_id: The client_id of this ServiceDescription.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceDescription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceDescription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
