# coding: utf-8

"""
    X-Road Security Server Admin API

    X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.  # noqa: E501

    OpenAPI spec version: 1.0.30
    Contact: info@niis.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Service(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'full_service_code': 'str',
        'service_code': 'str',
        'timeout': 'int',
        'title': 'str',
        'ssl_auth': 'bool',
        'subjects_count': 'int',
        'url': 'str',
        'endpoints': 'list[Endpoint]'
    }

    attribute_map = {
        'id': 'id',
        'full_service_code': 'full_service_code',
        'service_code': 'service_code',
        'timeout': 'timeout',
        'title': 'title',
        'ssl_auth': 'ssl_auth',
        'subjects_count': 'subjects_count',
        'url': 'url',
        'endpoints': 'endpoints'
    }

    def __init__(self, id=None, full_service_code=None, service_code=None, timeout=None, title=None, ssl_auth=None, subjects_count=None, url=None, endpoints=None):  # noqa: E501
        """Service - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._full_service_code = None
        self._service_code = None
        self._timeout = None
        self._title = None
        self._ssl_auth = None
        self._subjects_count = None
        self._url = None
        self._endpoints = None
        self.discriminator = None
        self.id = id
        if full_service_code is not None:
            self.full_service_code = full_service_code
        self.service_code = service_code
        self.timeout = timeout
        if title is not None:
            self.title = title
        if ssl_auth is not None:
            self.ssl_auth = ssl_auth
        if subjects_count is not None:
            self.subjects_count = subjects_count
        self.url = url
        if endpoints is not None:
            self.endpoints = endpoints

    @property
    def id(self):
        """Gets the id of this Service.  # noqa: E501

        encoded service id, including client id  # noqa: E501

        :return: The id of this Service.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Service.

        encoded service id, including client id  # noqa: E501

        :param id: The id of this Service.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def full_service_code(self):
        """Gets the full_service_code of this Service.  # noqa: E501

        encoded service code and version  # noqa: E501

        :return: The full_service_code of this Service.  # noqa: E501
        :rtype: str
        """
        return self._full_service_code

    @full_service_code.setter
    def full_service_code(self, full_service_code):
        """Sets the full_service_code of this Service.

        encoded service code and version  # noqa: E501

        :param full_service_code: The full_service_code of this Service.  # noqa: E501
        :type: str
        """

        self._full_service_code = full_service_code

    @property
    def service_code(self):
        """Gets the service_code of this Service.  # noqa: E501

        encoded service code  # noqa: E501

        :return: The service_code of this Service.  # noqa: E501
        :rtype: str
        """
        return self._service_code

    @service_code.setter
    def service_code(self, service_code):
        """Sets the service_code of this Service.

        encoded service code  # noqa: E501

        :param service_code: The service_code of this Service.  # noqa: E501
        :type: str
        """
        if service_code is None:
            raise ValueError("Invalid value for `service_code`, must not be `None`")  # noqa: E501

        self._service_code = service_code

    @property
    def timeout(self):
        """Gets the timeout of this Service.  # noqa: E501

        service time out value  # noqa: E501

        :return: The timeout of this Service.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this Service.

        service time out value  # noqa: E501

        :param timeout: The timeout of this Service.  # noqa: E501
        :type: int
        """
        if timeout is None:
            raise ValueError("Invalid value for `timeout`, must not be `None`")  # noqa: E501

        self._timeout = timeout

    @property
    def title(self):
        """Gets the title of this Service.  # noqa: E501

        service title  # noqa: E501

        :return: The title of this Service.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Service.

        service title  # noqa: E501

        :param title: The title of this Service.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def ssl_auth(self):
        """Gets the ssl_auth of this Service.  # noqa: E501

        service ssl auth  # noqa: E501

        :return: The ssl_auth of this Service.  # noqa: E501
        :rtype: bool
        """
        return self._ssl_auth

    @ssl_auth.setter
    def ssl_auth(self, ssl_auth):
        """Sets the ssl_auth of this Service.

        service ssl auth  # noqa: E501

        :param ssl_auth: The ssl_auth of this Service.  # noqa: E501
        :type: bool
        """

        self._ssl_auth = ssl_auth

    @property
    def subjects_count(self):
        """Gets the subjects_count of this Service.  # noqa: E501

        count of acl subjects  # noqa: E501

        :return: The subjects_count of this Service.  # noqa: E501
        :rtype: int
        """
        return self._subjects_count

    @subjects_count.setter
    def subjects_count(self, subjects_count):
        """Sets the subjects_count of this Service.

        count of acl subjects  # noqa: E501

        :param subjects_count: The subjects_count of this Service.  # noqa: E501
        :type: int
        """

        self._subjects_count = subjects_count

    @property
    def url(self):
        """Gets the url of this Service.  # noqa: E501

        service url  # noqa: E501

        :return: The url of this Service.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Service.

        service url  # noqa: E501

        :param url: The url of this Service.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def endpoints(self):
        """Gets the endpoints of this Service.  # noqa: E501

        list of endpoints linked to this service  # noqa: E501

        :return: The endpoints of this Service.  # noqa: E501
        :rtype: list[Endpoint]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this Service.

        list of endpoints linked to this service  # noqa: E501

        :param endpoints: The endpoints of this Service.  # noqa: E501
        :type: list[Endpoint]
        """

        self._endpoints = endpoints

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Service, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Service):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
