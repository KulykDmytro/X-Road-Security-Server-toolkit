# coding: utf-8

"""
    X-Road Security Server Admin API

    X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.  # noqa: E501

    OpenAPI spec version: 1.0.31
    Contact: info@niis.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccessRight(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_code': 'str',
        'service_title': 'str',
        'rights_given_at': 'datetime'
    }

    attribute_map = {
        'service_code': 'service_code',
        'service_title': 'service_title',
        'rights_given_at': 'rights_given_at'
    }

    def __init__(self, service_code=None, service_title=None, rights_given_at=None):  # noqa: E501
        """AccessRight - a model defined in Swagger"""  # noqa: E501
        self._service_code = None
        self._service_title = None
        self._rights_given_at = None
        self.discriminator = None
        self.service_code = service_code
        if service_title is not None:
            self.service_title = service_title
        if rights_given_at is not None:
            self.rights_given_at = rights_given_at

    @property
    def service_code(self):
        """Gets the service_code of this AccessRight.  # noqa: E501

        service code  # noqa: E501

        :return: The service_code of this AccessRight.  # noqa: E501
        :rtype: str
        """
        return self._service_code

    @service_code.setter
    def service_code(self, service_code):
        """Sets the service_code of this AccessRight.

        service code  # noqa: E501

        :param service_code: The service_code of this AccessRight.  # noqa: E501
        :type: str
        """
        if service_code is None:
            raise ValueError("Invalid value for `service_code`, must not be `None`")  # noqa: E501

        self._service_code = service_code

    @property
    def service_title(self):
        """Gets the service_title of this AccessRight.  # noqa: E501

        service title  # noqa: E501

        :return: The service_title of this AccessRight.  # noqa: E501
        :rtype: str
        """
        return self._service_title

    @service_title.setter
    def service_title(self, service_title):
        """Sets the service_title of this AccessRight.

        service title  # noqa: E501

        :param service_title: The service_title of this AccessRight.  # noqa: E501
        :type: str
        """

        self._service_title = service_title

    @property
    def rights_given_at(self):
        """Gets the rights_given_at of this AccessRight.  # noqa: E501

        access right given at  # noqa: E501

        :return: The rights_given_at of this AccessRight.  # noqa: E501
        :rtype: datetime
        """
        return self._rights_given_at

    @rights_given_at.setter
    def rights_given_at(self, rights_given_at):
        """Sets the rights_given_at of this AccessRight.

        access right given at  # noqa: E501

        :param rights_given_at: The rights_given_at of this AccessRight.  # noqa: E501
        :type: datetime
        """

        self._rights_given_at = rights_given_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessRight, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessRight):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
