# coding: utf-8

"""
    X-Road Security Server Admin API

    X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.  # noqa: E501

    OpenAPI spec version: 1.0.30
    Contact: info@niis.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CsrGenerate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key_usage_type': 'KeyUsageType',
        'ca_name': 'str',
        'csr_format': 'CsrFormat',
        'member_id': 'str',
        'subject_field_values': 'dict(str, str)'
    }

    attribute_map = {
        'key_usage_type': 'key_usage_type',
        'ca_name': 'ca_name',
        'csr_format': 'csr_format',
        'member_id': 'member_id',
        'subject_field_values': 'subject_field_values'
    }

    def __init__(self, key_usage_type=None, ca_name=None, csr_format=None, member_id=None, subject_field_values=None):  # noqa: E501
        """CsrGenerate - a model defined in Swagger"""  # noqa: E501
        self._key_usage_type = None
        self._ca_name = None
        self._csr_format = None
        self._member_id = None
        self._subject_field_values = None
        self.discriminator = None
        self.key_usage_type = key_usage_type
        self.ca_name = ca_name
        self.csr_format = csr_format
        if member_id is not None:
            self.member_id = member_id
        self.subject_field_values = subject_field_values

    @property
    def key_usage_type(self):
        """Gets the key_usage_type of this CsrGenerate.  # noqa: E501


        :return: The key_usage_type of this CsrGenerate.  # noqa: E501
        :rtype: KeyUsageType
        """
        return self._key_usage_type

    @key_usage_type.setter
    def key_usage_type(self, key_usage_type):
        """Sets the key_usage_type of this CsrGenerate.


        :param key_usage_type: The key_usage_type of this CsrGenerate.  # noqa: E501
        :type: KeyUsageType
        """
        if key_usage_type is None:
            raise ValueError("Invalid value for `key_usage_type`, must not be `None`")  # noqa: E501

        self._key_usage_type = key_usage_type

    @property
    def ca_name(self):
        """Gets the ca_name of this CsrGenerate.  # noqa: E501

        common name of the CA  # noqa: E501

        :return: The ca_name of this CsrGenerate.  # noqa: E501
        :rtype: str
        """
        return self._ca_name

    @ca_name.setter
    def ca_name(self, ca_name):
        """Sets the ca_name of this CsrGenerate.

        common name of the CA  # noqa: E501

        :param ca_name: The ca_name of this CsrGenerate.  # noqa: E501
        :type: str
        """
        if ca_name is None:
            raise ValueError("Invalid value for `ca_name`, must not be `None`")  # noqa: E501

        self._ca_name = ca_name

    @property
    def csr_format(self):
        """Gets the csr_format of this CsrGenerate.  # noqa: E501


        :return: The csr_format of this CsrGenerate.  # noqa: E501
        :rtype: CsrFormat
        """
        return self._csr_format

    @csr_format.setter
    def csr_format(self, csr_format):
        """Sets the csr_format of this CsrGenerate.


        :param csr_format: The csr_format of this CsrGenerate.  # noqa: E501
        :type: CsrFormat
        """
        if csr_format is None:
            raise ValueError("Invalid value for `csr_format`, must not be `None`")  # noqa: E501

        self._csr_format = csr_format

    @property
    def member_id(self):
        """Gets the member_id of this CsrGenerate.  # noqa: E501

        member client id for signing CSRs. <instance_id>:<member_class>:<member_code>  # noqa: E501

        :return: The member_id of this CsrGenerate.  # noqa: E501
        :rtype: str
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """Sets the member_id of this CsrGenerate.

        member client id for signing CSRs. <instance_id>:<member_class>:<member_code>  # noqa: E501

        :param member_id: The member_id of this CsrGenerate.  # noqa: E501
        :type: str
        """

        self._member_id = member_id

    @property
    def subject_field_values(self):
        """Gets the subject_field_values of this CsrGenerate.  # noqa: E501

        user-provided values for subject DN parameters  # noqa: E501

        :return: The subject_field_values of this CsrGenerate.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._subject_field_values

    @subject_field_values.setter
    def subject_field_values(self, subject_field_values):
        """Sets the subject_field_values of this CsrGenerate.

        user-provided values for subject DN parameters  # noqa: E501

        :param subject_field_values: The subject_field_values of this CsrGenerate.  # noqa: E501
        :type: dict(str, str)
        """
        if subject_field_values is None:
            raise ValueError("Invalid value for `subject_field_values`, must not be `None`")  # noqa: E501

        self._subject_field_values = subject_field_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CsrGenerate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CsrGenerate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
