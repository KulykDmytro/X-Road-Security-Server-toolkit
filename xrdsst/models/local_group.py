# coding: utf-8

"""
    X-Road Security Server Admin API

    X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.  # noqa: E501

    OpenAPI spec version: 1.0.30
    Contact: info@niis.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LocalGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'code': 'str',
        'description': 'str',
        'member_count': 'int',
        'updated_at': 'datetime',
        'members': 'list[GroupMember]'
    }

    attribute_map = {
        'id': 'id',
        'code': 'code',
        'description': 'description',
        'member_count': 'member_count',
        'updated_at': 'updated_at',
        'members': 'members'
    }

    def __init__(self, id=None, code=None, description=None, member_count=None, updated_at=None, members=None):  # noqa: E501
        """LocalGroup - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._code = None
        self._description = None
        self._member_count = None
        self._updated_at = None
        self._members = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.code = code
        self.description = description
        if member_count is not None:
            self.member_count = member_count
        if updated_at is not None:
            self.updated_at = updated_at
        if members is not None:
            self.members = members

    @property
    def id(self):
        """Gets the id of this LocalGroup.  # noqa: E501

        unique identifier  # noqa: E501

        :return: The id of this LocalGroup.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LocalGroup.

        unique identifier  # noqa: E501

        :param id: The id of this LocalGroup.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this LocalGroup.  # noqa: E501

        group code  # noqa: E501

        :return: The code of this LocalGroup.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this LocalGroup.

        group code  # noqa: E501

        :param code: The code of this LocalGroup.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def description(self):
        """Gets the description of this LocalGroup.  # noqa: E501

        group description  # noqa: E501

        :return: The description of this LocalGroup.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LocalGroup.

        group description  # noqa: E501

        :param description: The description of this LocalGroup.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def member_count(self):
        """Gets the member_count of this LocalGroup.  # noqa: E501

        member count  # noqa: E501

        :return: The member_count of this LocalGroup.  # noqa: E501
        :rtype: int
        """
        return self._member_count

    @member_count.setter
    def member_count(self, member_count):
        """Sets the member_count of this LocalGroup.

        member count  # noqa: E501

        :param member_count: The member_count of this LocalGroup.  # noqa: E501
        :type: int
        """

        self._member_count = member_count

    @property
    def updated_at(self):
        """Gets the updated_at of this LocalGroup.  # noqa: E501

        last time updated  # noqa: E501

        :return: The updated_at of this LocalGroup.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LocalGroup.

        last time updated  # noqa: E501

        :param updated_at: The updated_at of this LocalGroup.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def members(self):
        """Gets the members of this LocalGroup.  # noqa: E501

        group members  # noqa: E501

        :return: The members of this LocalGroup.  # noqa: E501
        :rtype: list[GroupMember]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this LocalGroup.

        group members  # noqa: E501

        :param members: The members of this LocalGroup.  # noqa: E501
        :type: list[GroupMember]
        """

        self._members = members

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocalGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocalGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
