# coding: utf-8

"""
    X-Road Security Server Admin API

    X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.  # noqa: E501

    OpenAPI spec version: 1.0.31
    Contact: info@niis.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from xrdsst.api_client.api_client import ApiClient


class CertificateAuthoritiesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_approved_certificate_authorities(self, **kwargs):  # noqa: E501
        """view the approved certificate authorities  # noqa: E501

        <h3>Administrator views the approved certificate authorities.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_approved_certificate_authorities(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KeyUsageType key_usage_type: return only CAs suitable for this type of key usage
        :param bool include_intermediate_cas: if true, include also intermediate CAs. Otherwise only top CAs are included. Default value is \"false\".
        :return: list[CertificateAuthority]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_approved_certificate_authorities_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_approved_certificate_authorities_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_approved_certificate_authorities_with_http_info(self, **kwargs):  # noqa: E501
        """view the approved certificate authorities  # noqa: E501

        <h3>Administrator views the approved certificate authorities.</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_approved_certificate_authorities_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KeyUsageType key_usage_type: return only CAs suitable for this type of key usage
        :param bool include_intermediate_cas: if true, include also intermediate CAs. Otherwise only top CAs are included. Default value is \"false\".
        :return: list[CertificateAuthority]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_usage_type', 'include_intermediate_cas']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_approved_certificate_authorities" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'key_usage_type' in params:
            query_params.append(('key_usage_type', params['key_usage_type']))  # noqa: E501
        if 'include_intermediate_cas' in params:
            query_params.append(('include_intermediate_cas', params['include_intermediate_cas']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/certificate-authorities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CertificateAuthority]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_subject_field_descriptions(self, ca_name, key_usage_type, **kwargs):  # noqa: E501
        """get description of subject DN fields for CSR  # noqa: E501

        <h3>List DN field descriptions to collect CSR parameters</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subject_field_descriptions(ca_name, key_usage_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ca_name: common name of the CA (required)
        :param KeyUsageType key_usage_type: which usage type this CSR is for (required)
        :param str key_id: id of the key. If provided, used only for validating correct key usage
        :param str member_id: member client id for signing CSRs. <instance_id>:<member_class>:<member_code>
        :param bool is_new_member: whether or not the member in the member_id parameter is a new member
        :return: list[CsrSubjectFieldDescription]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_subject_field_descriptions_with_http_info(ca_name, key_usage_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_subject_field_descriptions_with_http_info(ca_name, key_usage_type, **kwargs)  # noqa: E501
            return data

    def get_subject_field_descriptions_with_http_info(self, ca_name, key_usage_type, **kwargs):  # noqa: E501
        """get description of subject DN fields for CSR  # noqa: E501

        <h3>List DN field descriptions to collect CSR parameters</h3>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subject_field_descriptions_with_http_info(ca_name, key_usage_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ca_name: common name of the CA (required)
        :param KeyUsageType key_usage_type: which usage type this CSR is for (required)
        :param str key_id: id of the key. If provided, used only for validating correct key usage
        :param str member_id: member client id for signing CSRs. <instance_id>:<member_class>:<member_code>
        :param bool is_new_member: whether or not the member in the member_id parameter is a new member
        :return: list[CsrSubjectFieldDescription]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ca_name', 'key_usage_type', 'key_id', 'member_id', 'is_new_member']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subject_field_descriptions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ca_name' is set
        if ('ca_name' not in params or
                params['ca_name'] is None):
            raise ValueError("Missing the required parameter `ca_name` when calling `get_subject_field_descriptions`")  # noqa: E501
        # verify the required parameter 'key_usage_type' is set
        if ('key_usage_type' not in params or
                params['key_usage_type'] is None):
            raise ValueError("Missing the required parameter `key_usage_type` when calling `get_subject_field_descriptions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ca_name' in params:
            path_params['ca_name'] = params['ca_name']  # noqa: E501

        query_params = []
        if 'key_id' in params:
            query_params.append(('key_id', params['key_id']))  # noqa: E501
        if 'key_usage_type' in params:
            query_params.append(('key_usage_type', params['key_usage_type']))  # noqa: E501
        if 'member_id' in params:
            query_params.append(('member_id', params['member_id']))  # noqa: E501
        if 'is_new_member' in params:
            query_params.append(('is_new_member', params['is_new_member']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/certificate-authorities/{ca_name}/csr-subject-fields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CsrSubjectFieldDescription]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
